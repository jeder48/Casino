package Poker;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;


public class Card implements Comparable {
	
	private static final String[] colors = {"Karo","Herz","Pik","Kreuz"};
	private static final String[] values = {"2","3","4","5","6","7","8","9","10","J","Q","K","A"};
	private static BufferedImage[][] images = {new BufferedImage[13], new BufferedImage[13], new BufferedImage[13], new BufferedImage[13]};
	private static BufferedImage backside = null;
	//the image path can be generically generated by colors[color]-values[value].png

	/*
	 * Attributes
	 */
	private int value;
	private int color;
	private BufferedImage image;
	
	
	/*
	 * Constructors
	 */
	public Card(int valuer, int color) {
		this.setValue(value);
		this.setColor(color);

		try{
			backside = ImageIO.read(new File("res/art/cards/" + Card.toString(color, value) + ".png"));
		} catch(Exception e){
			System.out.println("Kartenrückseite konnte nicht geladen werden.");
		}
		//loadImage();		//Eventuell macht es Sinn Bilder erst bei Bedarf zu laden und zwischenzeitlich auch mal wieder zu löschen.
	}
	
	
	/*
	 * Helpful Shit
	 */
	private void loadImage(){
		loadImage(color, value);
	}
	private static void loadImage(int color, int value){
		try{ 
			Card.images[color][value] = ImageIO.read(new File("res/art/cards/" + Card.toString(color, value) + ".png"));
		} catch(Exception e) {
			System.out.println("Fehler beim laden des Bildes: "+toString(color, value));
		}
	}
	private static void refreshImages(){
		images = new BufferedImage[][]{new BufferedImage[13], new BufferedImage[13], new BufferedImage[13], new BufferedImage[13]};
	}

	@Override
	public int compareTo(Object o) {
		// !!! Function is used to sort from highest to lowest -> outcome is reversed !!!
		Card card = (Card)o;
		if(this.value > card.value) {
			return -1;
		} else if(this.value < card.value) {
			return 1;
		} else {
			if(this.color > card.color) {
				return -1;
			} else {
				return 1;
			}
		}
	}
	
	
	public String toString() {
		return toString(color, value);
	}
	public static String toString(int color, int value) {
		return colors[color]+"-"+values[value];
	}
	
	
	/*
	 * Getter- & Setter-Methods
	 */
	public int getValue() {
		return value;
	}
	public void setValue(int value) {
		this.value = value;
	}
	public int getColor() {
		return color;
	}
	public void setColor(int color) {
		this.color = color;
	}
	public BufferedImage getImage(){
		if(images[color][value]!=null){
			return images[color][value];
		} else {
			loadImage();
			return images[color][value];
		}
	}
}
